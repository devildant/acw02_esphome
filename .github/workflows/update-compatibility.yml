name: Update COMPATIBILITY.md

on:
  schedule:
    - cron: "0 0 * * 0"   # chaque dimanche à 00:00 UTC
  workflow_dispatch:       # déclenchement manuel

permissions:
  contents: write
  issues: read

jobs:
  build-list:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Generate COMPATIBILITY.md from issues
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          set -euo pipefail

          # En-tête
          {
            echo "# ACW02 ESPHome Compatibility List"
            echo
            echo "| Brand | Model | Status | Notes |"
            echo "|-------|-------|--------|-------|"
          } > COMPATIBILITY.md

          # Récupère toutes les issues (ouvertes/fermées) labellisées 'compatibility'
          mapfile -t ISSUES < <(gh issue list --repo "$REPO" --label "compatibility" --state all --json number --jq '.[].number')

          # Fonction d'extraction d'un bloc entre deux titres "###"
          extract_block () {
            # $1 = body, $2 = section title (exact)
            printf "%s" "$1" \
              | awk -v key="$2" '
                BEGIN{ RS="\r?\n"; insec=0 }
                {
                  if ($0 ~ "^###[ ]+" key "$") { insec=1; next }
                  if (insec && $0 ~ "^###[ ]+") { insec=0 }
                  if (insec) print
                }' \
              | sed ':a;N;$!ba;s/\n/ /g' \
              | sed 's/|/\\|/g' \
              | sed 's/^[[:space:]]*-\s*//; s/^[[:space:]]*//; s/[[:space:]]*$//' \
              | sed 's/^[[:space:]]*$/-/'
          }

          # Fonction spécifique pour Status (titre avec ou sans "?")
          extract_works () {
            awk '
              BEGIN{ RS="\r?\n"; insec=0 }
              /^###[[:space:]]+Works with ACW02 ESPHome(\?)?$/ { insec=1; next }
              insec && /^###/ { insec=0 }
              insec { print }
            ' \
            | sed ':a;N;$!ba;s/\n/ /g' \
            | sed 's/^[[:space:]]*-\s*//; s/^[[:space:]]*//; s/[[:space:]]*$//' \
            | sed 's/|/\\|/g'
          }

          for num in "${ISSUES[@]}"; do
            body="$(gh issue view "$num" --repo "$REPO" --json body --jq .body)"

            brand="$(extract_block "$body" "Brand")"
            model="$(extract_block "$body" "Exact Model")"
            works="$(printf "%s" "$body" | extract_works)"
            notes="$(extract_block "$body" "Additional Notes")"

            # Valeurs par défaut si vide
            [ -z "$brand" ] && brand="-"
            [ -z "$model" ] && model="-"
            [ -z "$works" ] && works="-"
            [ -z "$notes" ] && notes="-"

            # Normalisation sympa
            case "$works" in
              "Yes") works="✅ Yes" ;;
              "No") works="❌ No" ;;
              "Partially"|"Partially (some functions missing)") works="⚠️ Partially (some functions missing)" ;;
            esac

            echo "| $brand | $model | $works | $notes |" >> COMPATIBILITY.md
          done

      - name: Commit changes
        run: |
          set -e
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add COMPATIBILITY.md
          git commit -m "Update COMPATIBILITY.md [skip ci]" || echo "No changes"
          git push
