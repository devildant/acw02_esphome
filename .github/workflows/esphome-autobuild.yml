name: ESPHome Auto-Build (Latest)

on:
  schedule:
    - cron: '0 6 * * 6'         # chaque samedi Ã  06:00 UTC
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install latest ESPHome
        run: pip install --upgrade esphome

      - name: Capture ESPHome version
        id: ver
        shell: bash
        run: |
          set -e
          V=$(python -c "import esphome, sys; sys.stdout.write(getattr(esphome, '__version__', 'unknown'))")
          echo "ESPHOME_VERSION=$V" >> "$GITHUB_ENV"
          echo "version=$V" >> "$GITHUB_OUTPUT"

      - name: Read last passing version (if any)
        id: last
        shell: bash
        run: |
          LAST=$(cat .ci/last_success_esphome.txt 2>/dev/null || true)
          echo "last=$LAST" >> "$GITHUB_OUTPUT"

      - name: Compile firmware
        id: compile
        shell: bash
        run: |
          set +e
          esphome compile esphome-acw02-fr.yaml
          status=$?
          echo "status=$status" >> "$GITHUB_OUTPUT"
          if [ $status -ne 0 ]; then
            echo "failed=true" >> "$GITHUB_OUTPUT"
          else
            echo "failed=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Prepare/update badge JSON files
        if: always()
        shell: bash
        run: |
          set -e
          mkdir -p .ci/badges

          # Badge version ESPHome
          printf '%s' '{"schemaVersion":1,"label":"ESPHome","message":"'"${ESPHOME_VERSION}"'","color":"blue"}' > .ci/badges/esphome.json

          if [ "${{ steps.compile.outputs.failed }}" = "false" ]; then
            # Build OK : maj last_success + badges verts
            printf '%s' "${ESPHOME_VERSION}" > .ci/last_success_esphome.txt
            printf '%s' '{"schemaVersion":1,"label":"Build","message":"passing","color":"brightgreen"}' > .ci/badges/build.json
            printf '%s' '{"schemaVersion":1,"label":"Last passing","message":"'"${ESPHOME_VERSION}"'","color":"brightgreen"}' > .ci/badges/last_passing.json
            rm -f .ci/badges/problem.json || true
          else
            # Build KO : badges rouges + last passing si connu
            printf '%s' '{"schemaVersion":1,"label":"Build","message":"failing","color":"red"}' > .ci/badges/build.json
            if [ -n "${{ steps.last.outputs.last }}" ]; then
              printf '%s' '{"schemaVersion":1,"label":"Last passing","message":"'"${{ steps.last.outputs.last }}"'","color":"blue"}' > .ci/badges/last_passing.json
            fi
            printf '%s' '{"schemaVersion":1,"label":"Problem version","message":"'"${ESPHOME_VERSION}"'","color":"red"}' > .ci/badges/problem.json
          fi

      - name: Commit & push badge updates
        if: always()
        shell: bash
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add .ci/last_success_esphome.txt .ci/badges/*.json || true
          git commit -m "CI: badges for ESPHome ${ESPHOME_VERSION} (failed=${{ steps.compile.outputs.failed }})" || echo "No changes to commit"
          git push || echo "Nothing to push"

      - name: Fail job if compile failed
        if: steps.compile.outputs.failed == 'true'
        run: |
          echo "Compilation failed with ESPHome ${ESPHOME_VERSION}. Last passing: ${{ steps.last.outputs.last }}"
          exit 1
