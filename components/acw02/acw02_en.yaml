text:
  - platform: template
    name: "MQTT: Broker"
    id: mqtt_broker_address_input
    entity_category: config
    update_interval: never
    mode: text
    lambda: |-
      return id(ac_ctrl).get_mqtt_broker();
    set_action:
      then:
        - lambda: |-
            id(ac_ctrl).set_mqtt_broker(x);
            id(mqtt_broker_address_input).update();

  - platform: template
    name: "MQTT: Login"
    id: mqtt_login_input
    entity_category: config
    update_interval: never
    mode: text
    lambda: |-
      return id(ac_ctrl).get_mqtt_username();
    set_action:
      then:
        - lambda: |-
            id(ac_ctrl).set_mqtt_username(x);
            id(mqtt_login_input).update();

  - platform: template
    name: "MQTT: Password"
    id: mqtt_password_input
    entity_category: config
    update_interval: never
    mode: password
    lambda: |-
      return id(ac_ctrl).get_mqtt_password();
    set_action:
      then:
        - lambda: |-
            id(ac_ctrl).set_mqtt_password(x);
            id(mqtt_password_input).update();

  - platform: template
    name: "MQTT: Port"
    id: mqtt_port_input
    update_interval: never
    mode: text
    entity_category: config
    lambda: |-
      return id(ac_ctrl).int_to_string(id(ac_ctrl).get_mqtt_port());
    set_action:
      then:
        - lambda: |-
            id(ac_ctrl).set_mqtt_port_from_string(x);
            id(mqtt_port_input).update();

switch:
  - platform: template
    name: "G1: MQTT version options"
    id: g1_mqtt_options
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_g1_mqtt_options();
    turn_on_action:
      - lambda: id(ac_ctrl).set_g1_mqtt_options(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_g1_mqtt_options(false);

  - platform: template
    name: "G1: Mute command"
    id: mute_commande_api
    icon: mdi:volume-off
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_mute_on();
    turn_on_action:
      - lambda: id(ac_ctrl).set_mute(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_mute(false);

  - platform: template
    name: "Z-Config: Auto mode excluded"
    id: disable_mode_auto
    icon: "mdi:thermostat-cog"
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_disable_mode_auto();
    turn_on_action:
      - lambda: id(ac_ctrl).set_disable_mode_auto(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_disable_mode_auto(false);

  - platform: template
    name: "Z-Config: Heat mode excluded"
    id: disable_mode_heat
    icon: "mdi:thermostat-cog"
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_disable_mode_heat();
    turn_on_action:
      - lambda: id(ac_ctrl).set_disable_mode_heat(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_disable_mode_heat(false);

  - platform: template
    name: "Z-Config: Dry mode excluded"
    id: disable_mode_dry
    icon: "mdi:thermostat-cog"
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_disable_mode_dry();
    turn_on_action:
      - lambda: id(ac_ctrl).set_disable_mode_dry(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_disable_mode_dry(false);

  - platform: template
    name: "Z-Config: Fan mode excluded"
    id: disable_mode_fan
    icon: "mdi:thermostat-cog"
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_disable_mode_fan();
    turn_on_action:
      - lambda: id(ac_ctrl).set_disable_mode_fan(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_disable_mode_fan(false);

  - platform: template
    name: "Z-Config: Swing vertical excluded"
    id: disable_swing_vertical
    icon: "mdi:thermostat-cog"
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_disable_swing_vertical();
    turn_on_action:
      - lambda: id(ac_ctrl).set_disable_swing_vertical(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_disable_swing_vertical(false);

  - platform: template
    name: "Z-Config: Swing horizontal excluded"
    id: disable_swing_horizontal
    icon: "mdi:thermostat-cog"
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_disable_swing_horizontal();
    turn_on_action:
      - lambda: id(ac_ctrl).set_disable_swing_horizontal(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_disable_swing_horizontal(false);

  - platform: template
    name: "G1: Auto calc climate (eco)"
    id: option_recalculate_climate
    icon: mdi:autorenew
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_option_recalculate_climate();
    turn_on_action:
      - lambda: id(ac_ctrl).set_option_recalculate_climate(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_option_recalculate_climate(false);
  
  - platform: template
    name: "G1: Mode Off reset Eco/Purifier"
    id: reset_eco_purifier_ac_off
    icon: mdi:lock-reset
    entity_category: "config"
    lambda: |-
      return id(ac_ctrl).is_auto_off_options_when_ac_off();
    turn_on_action:
      - lambda: id(ac_ctrl).set_auto_off_options_when_ac_off(true);
    turn_off_action:
      - lambda: id(ac_ctrl).set_auto_off_options_when_ac_off(false);

button:
  - platform: restart
    name: "G1: Restart"
    id: restart_module_ac

  - platform: restart
    name: "MQTT: Validate"
    id: validate_mqtt
  
  - platform: template
    name: "G1: Refresh data"
    id: get_status_button
    icon: mdi:cloud-refresh-variant
    entity_category: "config"
    on_press:
      - lambda: |-
          id(ac_ctrl).reload_ac_info();

  - platform: template
    name: "G1: Rebuild MQTT entities"
    id: rebuild_mqtt_entities
    icon: mdi:cloud-refresh-variant
    entity_category: "config"
    on_press:
      - lambda: |-
          id(ac_ctrl).rebuild_mqtt_entity();

  - platform: template
    name: "Z-Config: Validate"
    id: apply_disable_settings
    icon: mdi:send
    entity_category: "config"
    on_press:
      - lambda: |-
          id(ac_ctrl).apply_disable_settings();
  - platform: template
    name: "Clear cmd ignore"
    id: clear_cmd_ignore
    icon: mdi:send
    entity_category: "config"
    on_press:
      - lambda: |-
          id(ac_ctrl).clear_cmd_ignore();

text_sensor:
  - platform: template
    name: "WiFi: mDNS"
    id: address_sensor
    entity_category: "diagnostic"
    lambda: |-
      return { id(ac_ctrl).get_address() };
  - platform: wifi_info
    ip_address:
      name: "WiFi: IP"
      id: wifi__ip
    ssid:
      name: "WiFi: Connected Access Point"
      id: wifi__ssid
    bssid:
      name: "WiFi: BSSID"
      id: wifi__bssid
    mac_address:
      name: "WiFi: MAC"
  - platform: version
    name: "ESP: Version"
  - platform: template
    name: "Warn Info"
    icon: mdi:alert-circle-outline
    id: ac_warn_text
    internal: true
  - platform: template
    name: "Error Info"
    icon: mdi:alert-octagon-outline
    id: ac_error_text
    internal: true
  - platform: template
    name: "CMD ignore TX"
    icon: mdi:alert-octagon-outline
    id: cmd_ignore_tx
  - platform: template
    name: "CMD ignore RX"
    icon: mdi:alert-octagon-outline
    id: cmd_ignore_rx

sensor:
  - platform: wifi_signal
    name: "WiFi: Signal"
    id: wifi__signal
    update_interval: 20s
  - platform: internal_temperature
    name: "ESP: CPU Temperature"
    id: esp__temp
    update_interval: 20s
  - platform: template
    name: "ESP: Free Memory"
    id: esp__memory
    lambda: |-
      return heap_caps_get_free_size(MALLOC_CAP_INTERNAL) / 1024.0;
    unit_of_measurement: "kB"
    update_interval: 20s
    entity_category: "diagnostic"

binary_sensor:
  - platform: template
    id: mqtt_conn_status
    name: "MQTT"
    device_class: connectivity
    entity_category: "diagnostic"
  - platform: template
    id: filter_dirty
    name: "Filter to clean"
    device_class: problem
    internal: true
  - platform: template
    id: warn_sensor
    name: "Warn"
    internal: true
    device_class: problem
  - platform: template
    id: error_sensor
    name: "Error"
    device_class: problem
    internal: true

globals:
  - id: stop_mqtt_updates
    type: bool
    restore_value: no
    initial_value: 'false'

interval:
  - interval: 1s
    then:
      lambda: |-
        id(ac_ctrl).set_mqtt_connected_sensor(id(mqtt_conn_status));
        id(ac_ctrl).set_filter_dirty_sensor(id(filter_dirty));
        id(ac_ctrl).set_warn_sensor(id(warn_sensor));
        id(ac_ctrl).set_error_sensor(id(error_sensor));
        id(ac_ctrl).set_warn_text_sensor(id(ac_warn_text));
        id(ac_ctrl).set_error_text_sensor(id(ac_error_text));
        id(ac_ctrl).set_cmd_ignore_tx_sensor(id(cmd_ignore_tx));
        id(ac_ctrl).set_cmd_ignore_rx_sensor(id(cmd_ignore_rx));
  - interval: 2s
    then:
      - lambda: |-
          if (id(stop_mqtt_updates)) return;
          id(mqtt_broker_address_input).update();
          id(mqtt_login_input).update();
          id(mqtt_password_input).update();
          id(mqtt_port_input).update();
          id(address_sensor).update();
          id(wifi__ip).update();
          id(wifi__ssid).update();
          id(wifi__bssid).update();
          id(wifi__signal).update();
          id(esp__temp).update();
          id(esp__memory).update();

  - interval: 30s
    then:
      - lambda: |-
          id(stop_mqtt_updates) = true;